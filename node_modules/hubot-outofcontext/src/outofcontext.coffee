# Description:
#   Store a quote from a user, repeat it back to them at random times out of context.
#   Has a 1 in 200 (ish?) chance of delivering a quote whenever a person speaks.
#
# Dependencies:
#   None
#
# Configuration:
#   None
#
# Commands:
#   hubot outofcontext <user name>: <message> - add a quote for a user
#   hubot ooc <user name>: <message> - add a quote for a user
#   hubot outofcontext rm <user name>: <message> - remove a quote for a user
#   hubot ooc rm <user name>: <message> - remove a quote for a user
#
# Author:
#   robotmay
_ = require 'lomath'

# given an alias, return the first name that contains the alias
findName = (robot, alias) ->
  _.findKey robot.brain.data.aliases, (aliasArr) ->
    _.includes aliasArr, alias.toLowerCase()

# The userId parser
# if 'me'/i, return 'me'
# else try alias
# else try fuzzy username
# else return undefined
userId = (robot, userName, msg) ->
  try 
    userName = _.trim userName.replace(/\@/g, '')
    if userName.toLowerCase() is 'me' or userName is ''
      candidate = msg.message.user.name
    else
      candidate = findName(robot, userName) or robot.brain.usersForFuzzyName(userName)[0].name
    return candidate
  catch error
    console.log("errore")
    #undefined

appendQuote = (data, user, message) ->
  data[user] ?= []
  data[user].push message

removeQuote = (data, user, message) ->
  index = data[user].indexOf(message)
  data[user] = data[user].slice(index, 1)

#findUser = (robot, msg, name, callback) ->
#  users = robot.brain.usersForFuzzyName(name.trim())
#  if users.length is 1
#    user = users[0]
#    callback(user)
#  else if users.length > 1
#    msg.send "Too many users like that"
#  else
#    msg.send "#{name}? Never heard of 'em"
  
module.exports = (robot) ->
  robot.brain.data.oocQuotes ?= {}

  robot.respond /outofcontext|ooc (?!rm )(.*?): (.*)/i, (msg) ->
    user = userId(robot, msg.match[1], msg)
    msg.send user
    appendQuote(robot.brain.data.oocQuotes, user, msg.match[2])
    msg.send "Quote has been stored for future prosperity."

  robot.respond /outofcontext|ooc rm (.*?): (.*)/i, (msg) ->
    userId robot, msg.match[1], msg, (user) ->
      removeQuote(robot.brain.data.oocQuotes, user, msg.match[2])
      msg.send "Quote has been removed from historical records."
  
  robot.hear /./i, (msg) ->
    return unless robot.brain.data.oocQuotes?
    user = userId(robot, msg.message.user.name)
    if (quotes = robot.brain.data.oocQuotes[user])
      randomQuote = quotes[Math.floor(Math.random() * quotes.length)]

      if Math.floor(Math.random() * 100) == 42
        msg.send "\"#{randomQuote}\" - #{msg.message.user.name}"
    if Math.floor(Math.random() * 100) == 43
      appendQuote(robot.brain.data.oocQuotes, user, msg)
        

